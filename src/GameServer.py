import os
import enum
import json
import pygame
from typing import Dict
from pathlib import Path
from src.deck import Deck
from src.hand import Hand
from src.player import Player
from src.game_state import GameState
from src.ui.event import post_event, CustomEvent
from src.player_interaction import PlayerInteraction
from src.player_interactions.init import all_player_types

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∑ –∏–≥—Ä—ã
class GamePhase(enum.StrEnum):
    CHOOSE_CARD = "Choose card"  # –§–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    DRAW_EXTRA = "Draw extra card"  # –§–∞–∑–∞ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
    CHOOSE_CARD_AGAIN = "Choose card again"  # –§–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
    NEXT_PLAYER = "Switch current player"  # –§–∞–∑–∞ —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    DETERMINE_WINNER = "Determine the winner"  # –§–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    DECLARE_WINNER = "Declare a winner"  # –§–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    GAME_END = "Game ended"  # –§–∞–∑–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
    BEGIN_ROUND = "Begin round" # –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞—É–Ω–¥, —Ä–∞–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã
    END_ROUND = "End round"     # –∫–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞, –ø–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
class GameServer:
    INITIAL_HAND_SIZE = 6  # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä—É–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
    MAX_TURNS = 100  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ –≤ –∏–≥—Ä–µ

    def __init__(self, player_types: Dict[Player, PlayerInteraction], game_state: GameState):
        self.game_state = game_state  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        self.player_types = player_types  # –¢–∏–ø—ã –∏–≥—Ä–æ–∫–æ–≤
        self.current_phase = GamePhase.CHOOSE_CARD  # –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞ –∏–≥—Ä—ã
        self.turn_count = 0  # –°—á–µ—Ç—á–∏–∫ —Ö–æ–¥–æ–≤

    @classmethod
    def load_game(cls, filename: str | Path):
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –∏–∑ —Ñ–∞–π–ª–∞
        with open(filename, 'r', encoding='utf-8') as fin:
            data = json.load(fin)  # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON-—Ñ–∞–π–ª–∞
            game_state = GameState.load(data)  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
            player_types = {
                player: next(pt for pt in all_player_types if pt.__name__ == player_data['kind'])(player.name)
                for player, player_data in zip(game_state.players, data['players'])
            }
            return cls(player_types=player_types, game_state=game_state)

    def save(self, filename: str | Path):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as fout:
            json.dump(self.save_to_dict(), fout, indent=4)

    def save_to_dict(self):
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        data = self.game_state.save()
        for player_index, player in enumerate(self.player_types.keys()):
            data['players'][player_index]['kind'] = self.player_types[player].__class__.__name__
        return data

    @classmethod
    def new_game(cls, player_types: Dict[Player, PlayerInteraction]):
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
        deck = Deck()  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–æ–¥—ã
        game_state = GameState(list(player_types.keys()), deck, deck.draw_card())  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        return cls(player_types, game_state)

    def run(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã
        print("=== –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! ===")
        while self.current_phase != GamePhase.GAME_END:
            self.run_one_step()
        '''
            self.turn_count += 1
        if self.turn_count >= self.MAX_TURNS:
            print("–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.")
            self.determine_winner_phase()
        '''

    def round_begin(self):
        """–ù–∞—á–∞–ª–æ —Ä–∞—É–Ω–¥–∞, —Ä–∞–∑–¥–∞—á–∞ –∫–∞—Ä—Ç.
        –ï—Å–ª–∏ –º—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å –∏–∑ json —Ñ–∞–π–ª–∞, –Ω–µ–ª—å–∑—è —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã, –Ω–∞–¥–æ –∏–≥—Ä–∞—Ç—å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å.
        """
        # –µ—Å–ª–∏ —Ä—É–∫–∏ –ø—É—Å—Ç—ã–µ –∏–≥—Ä–æ–∫–∞, —Ç–æ –Ω–∞–¥–æ —Ä–∞–∑–¥–∞–≤–∞—Ç—å –∫–∞—Ä—Ç—ã
        current_player = self.game_state.current_player()
        if current_player.hand.is_empty():
            self.game_state.deal_cards()
        return GamePhase.CHOOSE_CARD

    def round_end(self):
        """–ö–æ–Ω–µ—Ü —Ä–∞—É–Ω–¥–∞.
        –°—á–∏—Ç–∞–µ–º –æ—á–∫–∏.
        (?) –∏–∑–±–∞–≤–ª—è–µ–º—Å—è –æ—Ç –æ—á–∫–æ–≤ –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ä—Ç –Ω–∞ —Ä—É–∫–∞—Ö.
        –û—á–∏—â–∞–µ–º —Ä—É–∫–∏.
        –ò–∑ –≤—Å–µ—Ö –∫–∞—Ä—Ç —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–ª–æ–¥—É –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–µ.
        """
        # —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        #    –ø–æ –µ–≥–æ —Ä—É–∫–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∏–≥—Ä–æ–∫—É
        #    –æ—á–∏—â–∞–µ–º —Ä—É–∫—É
        # –µ—Å–ª–∏ —É –∫–∞–∫–æ–≥–æ-—Ç–æ –∏–≥—Ä–æ–∫–∞ 40 –∏–ª–∏ –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, –∫–æ–Ω–µ—Ü –∏–≥—Ä—ã
        #    return GamePhase.DETERMINE_WINNER

        # –¥–µ–ª–∞–µ–º –Ω–æ–≤—É—é –∫–æ–ª–æ–¥—É –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –µ–µ
        self.game_state.deck = Deck()
        self.game_state.deck.shuffle()
        return GamePhase.BEGIN_ROUND

    def run_one_step(self):
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —à–∞–≥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑—ã –∏–≥—Ä—ã
        phases = {
            GamePhase.BEGIN_ROUND: self.round_begin,        # CHOOSE_CARD
            GamePhase.CHOOSE_CARD: self.choose_card_phase,  # DRAW_EXTRA | NEXT_PLAYER
            GamePhase.CHOOSE_CARD_AGAIN: self.choose_card_again_phase,  # NEXT_PLAYER
            GamePhase.DRAW_EXTRA: self.draw_extra_phase,    # CHOOSE_CARD_AGAIN | NEXT_PLAYER
            GamePhase.NEXT_PLAYER: self.next_player_phase,
                # CHOOSE_CARD (—Å–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–≥—Ä–∞—Ç—å)
                # NEXT_PLAYER (—ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ quit –∏ –∏–¥–µ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É)
                # END_ROUND (–≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ quit)
            GamePhase.END_ROUND: self.round_end,            # BEGIN_ROUND, DETERMINE_WINNER
            GamePhase.DETERMINE_WINNER: self.determine_winner_phase,
            GamePhase.DECLARE_WINNER: self.declare_winner_phase
        }
        self.current_phase = phases[self.current_phase]()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ

    def determine_winner_phase(self) -> GamePhase:
        # –§–∞–∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        players = self.game_state.players
        print("\n–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏ –∏–≥—Ä–æ–∫–æ–≤:")
        for player in players:
            print(f"{player.name}: {player.score}")  # –í—ã–≤–æ–¥ –æ—á–∫–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –¥–æ—Å—Ç–∏–≥ 40 –æ—á–∫–æ–≤
        if any(player.score >= 40 for player in players):
            # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –æ—á–∫–∞–º–∏ –º–µ–Ω–µ–µ 40
            players_below_40 = [player for player in players if player.score < 40]

            if players_below_40:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∏–µ –∏–≥—Ä–æ–∫–∏
                min_score = min(player.score for player in players_below_40)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç —Å—Ä–µ–¥–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å < 40
                winners = [player for player in players_below_40 if
                           player.score == min_score]  # –ò–≥—Ä–æ–∫–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º

                if winners:
                    return self.declare_winner_phase(winners[0])  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º —Å—á–µ—Ç–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º

        # –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –¥–æ—Å—Ç–∏–≥ 40 –æ—á–∫–æ–≤, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –æ–±—ã—á–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º
        min_score = min(player.score for player in players)  # –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
        winners = [player for player in players if player.score == min_score]
        return self.declare_winner_phase(winners[0])  # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

    def declare_winner_phase(self, winner: Player) -> GamePhase:
        # –§–∞–∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        print(f"\nüéâ {winner.name} –≤—ã–∏–≥—Ä–∞–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º {winner.score}! üéâ")
        post_event(CustomEvent.DECLARE_WINNER, player_index=self.game_state.current_player_index)
        return GamePhase.GAME_END

    def next_player_phase(self) -> GamePhase:
        # –§–∞–∑–∞ —Å–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        current_player = self.game_state.current_player()
        # –µ—Å–ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ quit
        #   return GamePhase.END_ROUND
        # –µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ quit
        #   return GamePhase.NEXT_PLAYER
        # –µ—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, —Ç–æ —Ç–µ–∫—É—â–∏–π –∏–≥—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–≥—Ä–∞–ª
        if not current_player.hand.cards:
            return GamePhase.END_ROUND  # –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

        self.game_state.next_player()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        print(f"\n=== –•–æ–¥ {self.game_state.current_player().name} ===")
        return GamePhase.CHOOSE_CARD  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã

    def choose_card_again_phase(self) -> GamePhase:
        # –§–∞–∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
        current_player = self.game_state.current_player()
        playable_cards = current_player.hand.playable_cards(self.game_state.top)
        if playable_cards:
            card = playable_cards[0]
            if self.player_types[current_player].choose_to_play(self.game_state.top, card):
                current_player.hand.remove_card(card)  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏
                self.game_state.top = card  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç—ã
                self.inform_all("inform_card_played", current_player, card)
                post_event(CustomEvent.PLAY_CARD, card=card, player_index=self.game_state.current_player_index)
        return GamePhase.NEXT_PLAYER

    def choose_card_phase(self) -> GamePhase:
        # –§–∞–∑–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã
        current_player = self.game_state.current_player()
        playable_cards = current_player.hand.playable_cards(self.game_state.top)
        print(f"\n–ò–≥—Ä–æ–∫ {current_player.name} {current_player.hand} –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å: {playable_cards} –Ω–∞ {self.game_state.top}")

        if not playable_cards:
            print(f"–ò–≥—Ä–æ–∫ {current_player.name} –Ω–µ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç—ã.")
            return GamePhase.DRAW_EXTRA  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ñ–∞–∑–µ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã

        card = self.player_types[current_player].choose_card(current_player.hand,
                                                             self.game_state.top)  # –ò–≥—Ä–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É
        if card and card in playable_cards:
            current_player.hand.remove_card(card)  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ —Ä—É–∫–∏
            self.game_state.top = card  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Ö–Ω–µ–π –∫–∞—Ä—Ç—ã

            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—á–∫–æ–≤ –∑–∞ —Å—ã–≥—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
            current_player.score += self.calculate_points(card)  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤

            self.player_types[current_player].inform_card_played(current_player, card)
            post_event(CustomEvent.PLAY_CARD, card=card, player_index=self.game_state.current_player_index)
        return GamePhase.NEXT_PLAYER

    def draw_extra_phase(self) -> GamePhase:
        # –§–∞–∑–∞ –≤—ã—Ç—è–≥–∏–≤–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã
        current_player = self.game_state.current_player()
        drawn_card = self.game_state.draw_card()  # –í—ã—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –∏–∑ –∫–æ–ª–æ–¥—ã
        if drawn_card is None:
            print("–ö–æ–ª–æ–¥–∞ –ø—É—Å—Ç–∞, —Ö–æ–¥ –ø—Ä–æ–ø—É—â–µ–Ω.")
            return GamePhase.NEXT_PLAYER

        self.player_types[current_player].inform_card_drawn(current_player, drawn_card)
        current_player.hand.add_card(drawn_card)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –≤ —Ä—É–∫—É –∏–≥—Ä–æ–∫–∞
        print(f"–ò–≥—Ä–æ–∫ {current_player.name} –≤—ã—Ç—è–Ω—É–ª –∫–∞—Ä—Ç—É: {drawn_card}")
        if drawn_card.can_play_on(self.game_state.top) and self.player_types[current_player].choose_to_play(
                self.game_state.top, drawn_card):
            current_player.hand.remove_card(drawn_card)
            self.game_state.top = drawn_card
            self.player_types[current_player].inform_card_played(current_player, drawn_card)
            post_event(CustomEvent.PLAY_CARD, card=drawn_card, player_index=self.game_state.current_player_index)
        return GamePhase.NEXT_PLAYER

    def inform_all(self, method: str, *args, **kwargs):
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ —Å–æ–±—ã—Ç–∏–∏
        for player in self.player_types.values():
            getattr(player, method)(*args, **kwargs)  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞

    def calculate_points(self, card):
        # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –æ—á–∫–æ–≤
        return card.value  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —É –∫–∞—Ä—Ç—ã –µ—Å—Ç—å –∞—Ç—Ä–∏–±—É—Ç value

    @classmethod
    def request_player_count(cls) -> int:
        # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–≥—Ä–æ–∫–æ–≤
        while True:
            try:
                count = int(input("–°–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤? "))
                if count > 0:
                    return count
            except ValueError:
                pass
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    @classmethod
    def request_player_names(cls, count: int) -> list:
        # –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω –∏–≥—Ä–æ–∫–æ–≤
        names = []
        while len(names) < count:
            name = input(f"–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏–≥—Ä–æ–∫–∞ {len(names) + 1}: ")
            if name.isalpha():
                names.append(name)
            else:
                print("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤.")
        return names

    @classmethod
    def request_player_type(cls):
        # –ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ –∏–≥—Ä–æ–∫–∞
        player_types_list = [cls.__name__ for cls in all_player_types]
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∏–≥—Ä–æ–∫–æ–≤: {', '.join(player_types_list)}")
        while True:
            kind = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä–æ–∫–∞: ")
            if kind in player_types_list:
                return next(cls for cls in all_player_types if cls.__name__ == kind)

    @classmethod
    def get_players(cls):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏–≥—Ä–æ–∫–∞—Ö
        player_count = cls.request_player_count()
        names = cls.request_player_names(player_count)
        return {Player(name, Hand()): cls.request_player_type() for name in names}


def __main__():
    # –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
    save_file = 'lama.json'
    server = GameServer.load_game(save_file) if os.path.exists(save_file) else GameServer.new_game(
        GameServer.get_players())
    server.save(save_file)
    server.run()


if __name__ == "__main__":
    __main__()
